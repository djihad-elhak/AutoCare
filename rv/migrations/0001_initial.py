# Generated by Django 5.0.4 on 2024-05-14 21:46

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CarBrand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('logo', models.ImageField(default='car.jpg', upload_to='car_brand_logos/')),
            ],
        ),
        migrations.CreateModel(
            name='Date',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(unique=True)),
                ('booking_count', models.IntegerField(default=0)),
                ('is_full', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='UnavailableDate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('brand', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='rv.carbrand')),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('group_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth.group')),
                ('car_brand', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='rv.carbrand')),
            ],
            options={
                'verbose_name': 'Team',
                'verbose_name_plural': 'Teams',
            },
            bases=('auth.group',),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(default='fname', max_length=50)),
                ('last_name', models.CharField(default='lnmae', max_length=50)),
                ('password', models.CharField(max_length=128)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='staff_groups', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(related_name='logsig_staff_permissions', to='auth.permission')),
                ('team', models.ManyToManyField(related_name='staff_members', to='rv.team')),
            ],
            options={
                'db_table': 'staff',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('password', models.CharField(max_length=128)),
                ('groups', models.ManyToManyField(related_name='logsig_users', to='auth.group')),
                ('user_permissions', models.ManyToManyField(related_name='logsig_users_permissions', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BookingHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('car_model', models.CharField(default='car model', max_length=15)),
                ('booking_date', models.DateField()),
                ('phone_number', models.CharField(max_length=15)),
                ('first_name', models.CharField(default='fname', max_length=50)),
                ('last_name', models.CharField(default='lnmae', max_length=50)),
                ('car_plate_number', models.CharField(default='car plate number', max_length=20)),
                ('email', models.EmailField(default='example@example.com', max_length=254)),
                ('arrival_status', models.CharField(choices=[('ARRIVED', 'Arrived'), ('NOT_ARRIVED', 'Not arrived'), ('NOT_YET', 'Not yet')], default='NOT_YET', max_length=20)),
                ('repair_status', models.CharField(choices=[('REPAIRABLE', 'Repairable'), ('IRREPAIRABLE', 'Irreparable'), ('NOT_YET', 'Not yet')], default='NOT_YET', max_length=20)),
                ('car_brand', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='rv.carbrand')),
                ('services', models.ManyToManyField(to='rv.service')),
                ('staff', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='rv.staff')),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='rv.users')),
            ],
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('car_model', models.CharField(default='car model', max_length=15)),
                ('booking_date', models.DateField()),
                ('phone_number', models.CharField(max_length=15)),
                ('first_name', models.CharField(default='fname', max_length=50)),
                ('last_name', models.CharField(default='lnmae', max_length=50)),
                ('car_plate_number', models.CharField(default='car plate number', max_length=20)),
                ('email', models.EmailField(default='example@example.com', max_length=254)),
                ('arrival_status', models.CharField(choices=[('ARRIVED', 'Arrived'), ('NOT_ARRIVED', 'Not arrived'), ('NOT_YET', 'Not yet')], default='NOT_YET', max_length=20)),
                ('repair_status', models.CharField(choices=[('REPAIRABLE', 'Repairable'), ('IRREPAIRABLE', 'Irreparable'), ('NOT_YET', 'Not yet')], default='NOT_YET', max_length=20)),
                ('car_brand', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='rv.carbrand')),
                ('services', models.ManyToManyField(to='rv.service')),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='rv.users')),
            ],
        ),
    ]
